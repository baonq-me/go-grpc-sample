package main

import (
	"bytes"
	"fmt"

	"github.com/ng-vu/go-grpc-sample/base/gen"
	"github.com/ng-vu/go-grpc-sample/base/idgen"
	"github.com/ng-vu/go-grpc-sample/base/l"
)

// Infix constants
var (
	infixes = [][2]string{
		{"InfixAgencyStaff", "AS"},
		{"InfixBlueStaff", "PS"},
		{"InfixService", "SV"},
		{"InfixServiceProvider", "SP"},
		{"InfixOrder", "P0"},
		{"InfixOrderTransaction", "0T"},
		{"InfixMoneyTransaction", "MT"},
	}

	ll = l.New()
)

const tplPkg = `// Generated by idconsts_gen. DO NOT EDIT.
package model
`

func main() {
	buf := new(bytes.Buffer)

	buf.WriteString(tplPkg)
	for _, infix := range infixes {
		fmt.Fprintf(buf, "const %v = Infix(%v)\n", infix[0], idgen.CalcInfix(infix[1]))
	}

	buf.WriteString("var str2infix = map[string]Infix{\n")
	for _, infix := range infixes {
		fmt.Fprintf(buf, "\"%v\": %v,\n", infix[1], infix[0])
	}
	buf.WriteString("}\n")

	buf.WriteString("var infix2str = map[Infix]string{\n")
	for _, infix := range infixes {
		fmt.Fprintf(buf, "%v: \"%v\",\n", infix[0], infix[1])
	}
	buf.WriteString("}\n")

	gen.WriteFile("blue/internal/model/id.gen.go", buf.Bytes())
}
